{"ID":"20250510111017-ljmr8ud","Spec":"1","Type":"NodeDocument","Properties":{"id":"20250510111017-ljmr8ud","title":"前端术语解读 - 底层运行类_conflict_github_1746846585418","type":"doc","updated":"20250510111017"},"Children":[{"ID":"20250510110938-gpg49dx","Type":"NodeThematicBreak","Properties":{"id":"20250510110938-gpg49dx","updated":"20250510110938"}},{"ID":"20250510110938-geuog9o","Type":"NodeParagraph","Properties":{"id":"20250510110938-geuog9o","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"title: 前端术语解读 - 底层运行类\ndate: 2025-03-30T00:49:06Z\nlastmod: 2025-03-30T01:15:11Z"}]},{"ID":"20250510110938-3whskwp","Type":"NodeThematicBreak","Properties":{"id":"20250510110938-3whskwp","updated":"20250510110938"}},{"ID":"20250510110938-qkudwby","Type":"NodeParagraph","Properties":{"id":"20250510110938-qkudwby","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"转载 文章链接: https://note.weizwz.com/terminology/low-level-operation  为知笔记"}]},{"ID":"20250510110938-reys2r5","Type":"NodeBlockquote","Properties":{"id":"20250510110938-reys2r5","updated":"20250510110938"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20250510110938-p4umipu","Type":"NodeParagraph","Properties":{"id":"20250510110938-p4umipu","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"前端名词解读，本篇是底层运行类。"}]}]},{"ID":"20250510110938-3we0fhq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250510110938-3we0fhq","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"前端运行简易图示"}]},{"ID":"20250510110938-izzusky","Type":"NodeParagraph","Properties":{"id":"20250510110938-izzusky","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"浏览器作为客户端，为用户提供图形界面，内嵌的JS引擎、渲染引擎、网络模块等为此服务；而服务器作为服务端，提供服务运行的软硬件，包括提供服务运行环境、数据库、负载均衡等。"}]},{"ID":"20250510110938-tmhatdz","Type":"NodeParagraph","Properties":{"id":"20250510110938-tmhatdz","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20250301155813077"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://www.helloimg.com/i/2025/03/01/67c2beed2323e.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20250510110938-gax4x3g","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250510110938-gax4x3g","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"JS是单线程，却能异步操作"}]},{"ID":"20250510110938-80vdmzg","Type":"NodeParagraph","Properties":{"id":"20250510110938-80vdmzg","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"JavaScript 的单线程指的是主线程，但是浏览器或者Nodejs的底层是多线程的"},{"Type":"NodeText","Data":"。当JavaScript调用异步API（如 setTimeout 或 fetch）时，这些操作会被交给浏览器的其他线程（如定时器线程、网络线程）去执行。一旦这些操作完成，它们会将相应的回调放入任务队列中，等待主线程空闲时执行。因此，JavaScript 的主线程不会被阻塞，可以继续执行其他任务。"}]},{"ID":"20250510110938-1ph4gcb","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-1ph4gcb","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"核心"}]},{"ID":"20250510110938-v85l8f0","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20250510110938-v85l8f0","updated":"20250510110938"},"Children":[{"ID":"20250510110938-akcsmqp","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20250510110938-akcsmqp","updated":"20250510110938"},"Children":[{"ID":"20250510110938-mplzr16","Type":"NodeParagraph","Properties":{"id":"20250510110938-mplzr16","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"非阻塞 I/O"},{"Type":"NodeText","Data":"：通过事件驱动的方式，JavaScript 可以在等待 I/O 操作（如网络请求或文件读取）完成的同时继续处理其他任务，从而避免了阻塞主线程的情况。"}]}]},{"ID":"20250510110938-5t64v81","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20250510110938-5t64v81","updated":"20250510110938"},"Children":[{"ID":"20250510110938-3dnzyaf","Type":"NodeParagraph","Properties":{"id":"20250510110938-3dnzyaf","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"事件循环机制"},{"Type":"NodeText","Data":"：事件循环确保了异步操作的回调可以在适当的时候被执行，而不需要阻塞其他代码的执行。"}]}]},{"ID":"20250510110938-2hsllb1","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20250510110938-2hsllb1","updated":"20250510110938"},"Children":[{"ID":"20250510110938-dvjq10d","Type":"NodeParagraph","Properties":{"id":"20250510110938-dvjq10d","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"异步编程工具"},{"Type":"NodeText","Data":"：JavaScript 提供了多种处理异步操作的方式，包括回调函数、Promise 和 async/await 等，使得编写异步代码变得更加直观和易于管理。"}]}]},{"ID":"20250510110938-syju03h","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20250510110938-syju03h","updated":"20250510110938"},"Children":[{"ID":"20250510110938-56id4k5","Type":"NodeParagraph","Properties":{"id":"20250510110938-56id4k5","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"单线程的优势"},{"Type":"NodeText","Data":"：单线程避免了多线程编程中常见的并发问题，如死锁和竞态条件，简化了程序的设计和调试过程。"}]}]}]},{"ID":"20250510110938-nis19a9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250510110938-nis19a9","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"进程 Process"}]},{"ID":"20250510110938-qp1sbgf","Type":"NodeParagraph","Properties":{"id":"20250510110938-qp1sbgf","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"进程（Process）是操作系统进行资源分配和调度的基本单位"},{"Type":"NodeText","Data":"，它是程序执行时的一个实例。简单来说，当你启动一个应用程序时，操作系统会为这个应用程序创建一个进程，该进程包含了运行这个程序所需的所有资源，比如内存空间、系统文件描述符等。"}]},{"ID":"20250510110938-mtiiknj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-mtiiknj","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"特点"}]},{"ID":"20250510110938-nk0ua75","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-nk0ua75","updated":"20250510110938"},"Children":[{"ID":"20250510110938-f8gnfvs","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-f8gnfvs","updated":"20250510110938"},"Children":[{"ID":"20250510110938-ukuktc5","Type":"NodeParagraph","Properties":{"id":"20250510110938-ukuktc5","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"独立性"},{"Type":"NodeText","Data":"：每个进程都有自己独立的内存空间，这意味着一个进程中的变量和数据对另一个进程通常是不可见的。这种隔离提供了安全性，并防止不同进程之间的相互干扰。"}]}]},{"ID":"20250510110938-zevevrm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-zevevrm","updated":"20250510110938"},"Children":[{"ID":"20250510110938-yhgskec","Type":"NodeParagraph","Properties":{"id":"20250510110938-yhgskec","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"动态性"},{"Type":"NodeText","Data":"：进程是一个动态的概念，它包括了从创建到终止的整个生命周期，包括就绪、运行、等待等状态的变化。"}]}]},{"ID":"20250510110938-b4hcupm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-b4hcupm","updated":"20250510110938"},"Children":[{"ID":"20250510110938-wr935x0","Type":"NodeParagraph","Properties":{"id":"20250510110938-wr935x0","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"并发性"},{"Type":"NodeText","Data":"：在多任务操作系统中，多个进程可以在同一时间段内交替执行，给用户的感觉就像是它们同时在运行。实际上，这是通过CPU时间片轮转的方式实现的。"}]}]},{"ID":"20250510110938-f5ji1m6","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-f5ji1m6","updated":"20250510110938"},"Children":[{"ID":"20250510110938-5i5n2yo","Type":"NodeParagraph","Properties":{"id":"20250510110938-5i5n2yo","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"拥有资源"},{"Type":"NodeText","Data":"：每个进程都拥有一定的系统资源，如内存、处理器时间和磁盘I/O等。但是，这些资源并不是独占的，操作系统负责管理和分配这些资源。"}]}]}]},{"ID":"20250510110938-3fkigx4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-3fkigx4","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"说明"}]},{"ID":"20250510110938-7k95mfp","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-7k95mfp","updated":"20250510110938"},"Children":[{"ID":"20250510110938-prbmisz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-prbmisz","updated":"20250510110938"},"Children":[{"ID":"20250510110938-yyy7zws","Type":"NodeParagraph","Properties":{"id":"20250510110938-yyy7zws","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"进程之间不能直接数据访问"},{"Type":"NodeText","Data":"。每个进程都有自己独立的内存空间，如果想要相互访问数据，必须使用特定的机制进行进程间通信（Inter-Process Communication, 简称IPC）。常见的IPC方法包括：管道、消息队列、共享内存、套接字等。"}]}]},{"ID":"20250510110938-wxytajn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-wxytajn","updated":"20250510110938"},"Children":[{"ID":"20250510110938-bnx8otf","Type":"NodeParagraph","Properties":{"id":"20250510110938-bnx8otf","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"创建多进程需要编程语言和操作系统的支持"},{"Type":"NodeText","Data":"。例如，在Python中有multiprocessing模块，在Node.js中有child"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"_"}]},{"Type":"NodeText","Data":"process模块。操作系统本身也提供了命令行工具或者其他机制来启动新进程。例如，在Linux系统中，可以通过fork()系统调用来创建一个新的进程。"}]}]},{"ID":"20250510110938-41vbfsa","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-41vbfsa","updated":"20250510110938"},"Children":[{"ID":"20250510110938-6eo2gxp","Type":"NodeParagraph","Properties":{"id":"20250510110938-6eo2gxp","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"一个应用可以包含多个进程"},{"Type":"NodeText","Data":"。在现代操作系统中，应用程序能够启动和管理多个进程来实现不同的功能或者提升性能、稳定性等。每个进程都有其独立的内存空间和系统资源，这意味着即使一个进程崩溃，也不会直接影响到其他进程。例如：Chrome，通常为每个标签页或插件创建一个单独的进程，如果一个网页或插件出现问题导致崩溃，它不会影响其他网页或整个浏览器。"}]}]},{"ID":"20250510110938-sw31bd8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-sw31bd8","updated":"20250510110938"},"Children":[{"ID":"20250510110938-p4f0mz3","Type":"NodeParagraph","Properties":{"id":"20250510110938-p4f0mz3","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"一个进程通常只有一个主线程"},{"Type":"NodeText","Data":"。但在某些编程环境或框架中，可能会通过特定的设计模式或机制让一个进程看起来像是有多个“主线程”。例如，在一些GUI应用程序或多任务处理的应用程序中，可能会创建多个看似并行的重要线程，每个都承担关键任务。然而，从操作系统层面来看，这些仍然是子线程，其中只有一个被视作真正的主线程，即最初由操作系统为该进程创建的线程。"}]}]}]},{"ID":"20250510110938-e3xt41f","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250510110938-e3xt41f","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"线程 Thread"}]},{"ID":"20250510110938-h6rgo3p","Type":"NodeParagraph","Properties":{"id":"20250510110938-h6rgo3p","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"线程（Thread）是操作系统能够进行运算调度的最小单位"},{"Type":"NodeText","Data":"。它被包含在进程之中，是进程中的实际运作单位。一个进程（即运行中的程序）可以包含一个或多个线程。每个线程都执行特定的、独立的任务，但它们共享进程的资源，如内存空间和文件描述符等。"}]},{"ID":"20250510110938-e028gbh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-e028gbh","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"基本概念"}]},{"ID":"20250510110938-7m88db9","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-7m88db9","updated":"20250510110938"},"Children":[{"ID":"20250510110938-bwr4xql","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-bwr4xql","updated":"20250510110938"},"Children":[{"ID":"20250510110938-jkkih70","Type":"NodeParagraph","Properties":{"id":"20250510110938-jkkih70","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"线程分单线程和多线程"},{"Type":"NodeText","Data":"。"}]},{"ID":"20250510110938-vafvcsv","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-vafvcsv","updated":"20250510110938"},"Children":[{"ID":"20250510110938-k9zszcm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-k9zszcm","updated":"20250510110938"},"Children":[{"ID":"20250510110938-dot9xdh","Type":"NodeParagraph","Properties":{"id":"20250510110938-dot9xdh","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"如果一个进程只包含一个线程，则称其为单线程。"}]}]},{"ID":"20250510110938-a6ife0w","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-a6ife0w","updated":"20250510110938"},"Children":[{"ID":"20250510110938-chki7y2","Type":"NodeParagraph","Properties":{"id":"20250510110938-chki7y2","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"如果包含多个线程，则称为多线程。多线程可以同时执行多个任务，从而提高程序的效率和响应速度。"}]}]}]}]},{"ID":"20250510110938-f7kqtp0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-f7kqtp0","updated":"20250510110938"},"Children":[{"ID":"20250510110938-pnxy1xh","Type":"NodeParagraph","Properties":{"id":"20250510110938-pnxy1xh","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"并发与并行"},{"Type":"NodeText","Data":"："}]},{"ID":"20250510110938-tz8saf5","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-tz8saf5","updated":"20250510110938"},"Children":[{"ID":"20250510110938-ysy0v4q","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-ysy0v4q","updated":"20250510110938"},"Children":[{"ID":"20250510110938-lf52z2e","Type":"NodeParagraph","Properties":{"id":"20250510110938-lf52z2e","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"并发是指两个或更多的任务在同一时间段内交替执行，给用户的感觉是这些任务似乎是在同时进行，但实际上CPU在快速切换这些任务的执行。"}]}]},{"ID":"20250510110938-xv977q8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-xv977q8","updated":"20250510110938"},"Children":[{"ID":"20250510110938-1daw9be","Type":"NodeParagraph","Properties":{"id":"20250510110938-1daw9be","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"并行则是指两个或更多任务真正地在同一时刻被执行，这通常需要多个处理器核心来实现。"}]}]}]}]}]},{"ID":"20250510110938-savus5t","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-savus5t","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"工作原理"}]},{"ID":"20250510110938-qa2g2ms","Type":"NodeParagraph","Properties":{"id":"20250510110938-qa2g2ms","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"当一个程序启动时，操作系统会为其创建一个进程，并在这个进程中至少创建一个线程作为程序的入口点开始执行。线程之间可以共享同一进程内的资源，包括内存地址空间、打开的文件等，这使得线程之间的通信相对容易。但是，这也意味着如果一个线程中发生错误，可能会影响到整个进程中的所有线程。"}]},{"ID":"20250510110938-8t8djtq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-8t8djtq","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"举例"}]},{"ID":"20250510110938-bqug2ze","Type":"NodeParagraph","Properties":{"id":"20250510110938-bqug2ze","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"尽管JavaScript本身是单线程的，但是现代浏览器提供了 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Web Workers API"},{"Type":"NodeText","Data":"，允许你在前端环境中模拟多线程行为。下面通过一个简单的例子来解释如何使用Web Workers来处理复杂的计算任务而不阻塞主线程："}]},{"ID":"20250510110938-n14ghya","Type":"NodeParagraph","Properties":{"id":"20250510110938-n14ghya","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-iw9eo7i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-iw9eo7i","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// main.js\n// 创建一个新的Worker对象，它将在新线程中运行worker.js中的代码\nconst worker = new Worker('worker.js');\n\nworker.postMessage('start heavy computation');\n\nworker.onmessage = function(e) {\n    console.log('Result from worker:', e.data);\n};\n\nconsole.log('Main thread continues to run...');\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-tt96ltr","Type":"NodeParagraph","Properties":{"id":"20250510110938-tt96ltr","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-otxwl6m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-otxwl6m","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// worker.js\nonmessage = function(e) {\n    // 假设这里有一个非常耗费时间的计算\n    let result = 0;\n    for (let i = 1; i \u003c= 1000000000; i++) {\n        result += i;\n    }\n\t\t// 将计算结果发送回主线程\n    postMessage(result);\n};\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-fpcexyn","Type":"NodeParagraph","Properties":{"id":"20250510110938-fpcexyn","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"在这个例子中，worker.js在一个单独的线程中运行，可以执行复杂的计算而不会影响主线程（UI线程）。主线程可以继续响应用户的交互和其他操作。当计算完成时，结果会被发送回主线程。"}]},{"ID":"20250510110938-osv6zcy","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250510110938-osv6zcy","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"V8引擎"}]},{"ID":"20250510110938-0zwu8cy","Type":"NodeParagraph","Properties":{"id":"20250510110938-0zwu8cy","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"在前端开发中，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"V8 指的是Google开发的一个开源的高性能 JavaScript 和 WebAssembly（Web程序集）引擎，它用于编译和执行 JavaScript 代码"},{"Type":"NodeText","Data":"。V8主要用于Chrome浏览器和Node.js环境，此外也有部分框架和工具也使用了V8引擎，例如："},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Electron"},{"Type":"NodeText","Data":"（用于开发跨平台桌面应用程序的框架，结合了Chromium渲染引擎和Node.js运行时）、"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Deno"},{"Type":"NodeText","Data":"（一个新的JavaScript和TypeScript运行时，由Node.js的原作者Ryan Dahl创建，旨在解决Node.js的一些设计缺陷）、"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Bun"},{"Type":"NodeText","Data":"（这是一个相对较新的JavaScript运行时，旨在提供比Node.js更快的速度）等。"}]},{"ID":"20250510110938-89jpmgu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-89jpmgu","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"特点"}]},{"ID":"20250510110938-754e7m5","Type":"NodeParagraph","Properties":{"id":"20250510110938-754e7m5","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"主要特点如下："}]},{"ID":"20250510110938-2zychtl","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-2zychtl","updated":"20250510110938"},"Children":[{"ID":"20250510110938-mu0fe02","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-mu0fe02","updated":"20250510110938"},"Children":[{"ID":"20250510110938-m4m8bvk","Type":"NodeParagraph","Properties":{"id":"20250510110938-m4m8bvk","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"即时编译（JIT）"},{"Type":"NodeText","Data":"  ：V8不仅解释JavaScript代码，还会将频繁执行的代码编译成本地机器码，以提高执行效率。"}]}]},{"ID":"20250510110938-goq8ywk","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-goq8ywk","updated":"20250510110938"},"Children":[{"ID":"20250510110938-f0a9w2u","Type":"NodeParagraph","Properties":{"id":"20250510110938-f0a9w2u","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"垃圾回收机制"},{"Type":"NodeText","Data":"：自动管理内存，通过识别并回收不再使用的对象来释放内存。"}]}]},{"ID":"20250510110938-d8hw9di","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-d8hw9di","updated":"20250510110938"},"Children":[{"ID":"20250510110938-9zgvo6e","Type":"NodeParagraph","Properties":{"id":"20250510110938-9zgvo6e","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"高效性能"},{"Type":"NodeText","Data":"：由于采用了多种优化技术，如隐藏类、内联缓存等，使得JavaScript代码运行得更快。"}]}]},{"ID":"20250510110938-mkvyeid","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-mkvyeid","updated":"20250510110938"},"Children":[{"ID":"20250510110938-nn6j5tr","Type":"NodeParagraph","Properties":{"id":"20250510110938-nn6j5tr","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"支持ES6+标准"},{"Type":"NodeText","Data":"：V8持续更新以支持最新的ECMAScript标准，让开发者能够使用现代JavaScript的新特性。"}]}]}]},{"ID":"20250510110938-urdehvm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-urdehvm","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"优化技术"}]},{"ID":"20250510110938-atg6j8t","Type":"NodeParagraph","Properties":{"id":"20250510110938-atg6j8t","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"V8引擎采用了一系列优化技术来提升JavaScript代码的执行性能。以下是其中一些关键技术："}]},{"ID":"20250510110938-a1p5hqm","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20250510110938-a1p5hqm","updated":"20250510110938"},"Children":[{"ID":"20250510110938-g453pou","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20250510110938-g453pou","updated":"20250510110938"},"Children":[{"ID":"20250510110938-28e9e90","Type":"NodeParagraph","Properties":{"id":"20250510110938-28e9e90","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"即时编译（Just-In-Time Compilation, JIT）"},{"Type":"NodeText","Data":"  ："}]},{"ID":"20250510110938-rzhrayb","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-rzhrayb","updated":"20250510110938"},"Children":[{"ID":"20250510110938-n6dwaw2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-n6dwaw2","updated":"20250510110938"},"Children":[{"ID":"20250510110938-3d2ue3i","Type":"NodeParagraph","Properties":{"id":"20250510110938-3d2ue3i","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"V8首先解释执行JavaScript代码，然后对频繁执行的“热点”代码进行编译和优化，生成高效的机器码。"}]}]}]}]},{"ID":"20250510110938-f9639x7","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20250510110938-f9639x7","updated":"20250510110938"},"Children":[{"ID":"20250510110938-fub0nrn","Type":"NodeParagraph","Properties":{"id":"20250510110938-fub0nrn","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"TurboFan"},{"Type":"NodeText","Data":"："}]},{"ID":"20250510110938-rvsldto","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-rvsldto","updated":"20250510110938"},"Children":[{"ID":"20250510110938-hptluop","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-hptluop","updated":"20250510110938"},"Children":[{"ID":"20250510110938-0zaajk1","Type":"NodeParagraph","Properties":{"id":"20250510110938-0zaajk1","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"TurboFan是V8的现代优化编译器，它能对代码进行深层次的分析，并生成高度优化的机器码。"}]}]}]}]},{"ID":"20250510110938-m122z7h","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20250510110938-m122z7h","updated":"20250510110938"},"Children":[{"ID":"20250510110938-culrj1t","Type":"NodeParagraph","Properties":{"id":"20250510110938-culrj1t","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"隐藏类（Hidden Classes）"},{"Type":"NodeText","Data":"  ："}]},{"ID":"20250510110938-vsxvsol","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-vsxvsol","updated":"20250510110938"},"Children":[{"ID":"20250510110938-kkc9aw5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-kkc9aw5","updated":"20250510110938"},"Children":[{"ID":"20250510110938-tj0221d","Type":"NodeParagraph","Properties":{"id":"20250510110938-tj0221d","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"为了加速对象属性的访问，V8为对象创建了隐式的类结构，这类似于其他语言中的类概念，但更高效。"}]}]}]}]},{"ID":"20250510110938-yydojka","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20250510110938-yydojka","updated":"20250510110938"},"Children":[{"ID":"20250510110938-ahval7w","Type":"NodeParagraph","Properties":{"id":"20250510110938-ahval7w","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"内联缓存（Inline Caching）"},{"Type":"NodeText","Data":"  ："}]},{"ID":"20250510110938-9tg7p36","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-9tg7p36","updated":"20250510110938"},"Children":[{"ID":"20250510110938-z98rwps","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-z98rwps","updated":"20250510110938"},"Children":[{"ID":"20250510110938-ah530s1","Type":"NodeParagraph","Properties":{"id":"20250510110938-ah530s1","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"当访问对象的属性或调用方法时，V8会记住上次查找的结果，并在下次访问时直接使用该结果，从而减少重复查找的时间。"}]}]}]}]},{"ID":"20250510110938-tnbm76l","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20250510110938-tnbm76l","updated":"20250510110938"},"Children":[{"ID":"20250510110938-b2cd307","Type":"NodeParagraph","Properties":{"id":"20250510110938-b2cd307","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"垃圾回收（Garbage Collection, GC）"},{"Type":"NodeText","Data":"  ："}]},{"ID":"20250510110938-e5jz7du","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-e5jz7du","updated":"20250510110938"},"Children":[{"ID":"20250510110938-0xecx0t","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-0xecx0t","updated":"20250510110938"},"Children":[{"ID":"20250510110938-44q9qal","Type":"NodeParagraph","Properties":{"id":"20250510110938-44q9qal","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"分代垃圾回收：将堆内存分为新生代和老生代，针对不同生命周期的对象采用不同的回收策略。"}]}]},{"ID":"20250510110938-u00yjm0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-u00yjm0","updated":"20250510110938"},"Children":[{"ID":"20250510110938-6qo449c","Type":"NodeParagraph","Properties":{"id":"20250510110938-6qo449c","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"增量垃圾回收：将垃圾回收过程分成多个小步骤，以减少应用暂停时间。"}]}]},{"ID":"20250510110938-jl2ixu6","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-jl2ixu6","updated":"20250510110938"},"Children":[{"ID":"20250510110938-48ayf8h","Type":"NodeParagraph","Properties":{"id":"20250510110938-48ayf8h","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"并行垃圾回收：利用多核CPU并行处理垃圾回收任务，提高效率。"}]}]}]}]},{"ID":"20250510110938-n1rjgtm","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Ni4=","Num":6},"Properties":{"id":"20250510110938-n1rjgtm","updated":"20250510110938"},"Children":[{"ID":"20250510110938-p35w8u4","Type":"NodeParagraph","Properties":{"id":"20250510110938-p35w8u4","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"逃逸分析（Escape Analysis）"},{"Type":"NodeText","Data":"  ："}]},{"ID":"20250510110938-w341gty","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-w341gty","updated":"20250510110938"},"Children":[{"ID":"20250510110938-zua72dn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-zua72dn","updated":"20250510110938"},"Children":[{"ID":"20250510110938-awlnntu","Type":"NodeParagraph","Properties":{"id":"20250510110938-awlnntu","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"通过分析确定对象是否可能被外部引用，决定是否将对象分配到堆上，减少不必要的内存分配。"}]}]}]}]},{"ID":"20250510110938-u0v4fvm","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Ny4=","Num":7},"Properties":{"id":"20250510110938-u0v4fvm","updated":"20250510110938"},"Children":[{"ID":"20250510110938-ywvxhln","Type":"NodeParagraph","Properties":{"id":"20250510110938-ywvxhln","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"函数内联（Inlining）"},{"Type":"NodeText","Data":"  ："}]},{"ID":"20250510110938-94g5q3g","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-94g5q3g","updated":"20250510110938"},"Children":[{"ID":"20250510110938-msxy0pc","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-msxy0pc","updated":"20250510110938"},"Children":[{"ID":"20250510110938-wzguflp","Type":"NodeParagraph","Properties":{"id":"20250510110938-wzguflp","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"将简单的函数调用替换为其实际的函数体，减少函数调用开销。"}]}]}]}]},{"ID":"20250510110938-vk9tgdq","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"OC4=","Num":8},"Properties":{"id":"20250510110938-vk9tgdq","updated":"20250510110938"},"Children":[{"ID":"20250510110938-46pyce3","Type":"NodeParagraph","Properties":{"id":"20250510110938-46pyce3","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"代码拆分与懒加载（Code Splitting and Lazy Loading）"},{"Type":"NodeText","Data":"  ："}]},{"ID":"20250510110938-u8g6gmu","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-u8g6gmu","updated":"20250510110938"},"Children":[{"ID":"20250510110938-3gtfimf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-3gtfimf","updated":"20250510110938"},"Children":[{"ID":"20250510110938-vcnyg3x","Type":"NodeParagraph","Properties":{"id":"20250510110938-vcnyg3x","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"在大型应用中，只加载当前需要的部分代码，延迟加载其他部分，以加快初始页面加载速度。"}]}]}]}]},{"ID":"20250510110938-4tyk39f","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"OS4=","Num":9},"Properties":{"id":"20250510110938-4tyk39f","updated":"20250510110938"},"Children":[{"ID":"20250510110938-g9zf2fr","Type":"NodeParagraph","Properties":{"id":"20250510110938-g9zf2fr","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"常量池（Constant Pool）"},{"Type":"NodeText","Data":"  ："}]},{"ID":"20250510110938-tr43bs9","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-tr43bs9","updated":"20250510110938"},"Children":[{"ID":"20250510110938-rj2df5g","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-rj2df5g","updated":"20250510110938"},"Children":[{"ID":"20250510110938-0sla8m1","Type":"NodeParagraph","Properties":{"id":"20250510110938-0sla8m1","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"编译器优化的一部分，帮助减少运行时的内存访问次数，提高执行效率。"}]}]}]}]},{"ID":"20250510110938-h8dji1w","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MTAu","Num":10},"Properties":{"id":"20250510110938-h8dji1w","updated":"20250510110938"},"Children":[{"ID":"20250510110938-dz5xj4j","Type":"NodeParagraph","Properties":{"id":"20250510110938-dz5xj4j","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"抽象解释器（Abstract Interpreter）"},{"Type":"NodeText","Data":"  ："}]},{"ID":"20250510110938-d5n5wlh","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-d5n5wlh","updated":"20250510110938"},"Children":[{"ID":"20250510110938-bhcybiw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-bhcybiw","updated":"20250510110938"},"Children":[{"ID":"20250510110938-q0iv7zl","Type":"NodeParagraph","Properties":{"id":"20250510110938-q0iv7zl","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"用于分析代码路径和类型信息，以便更好地优化代码。"}]}]}]}]}]},{"ID":"20250510110938-qyq2x9b","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250510110938-qyq2x9b","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"I/O （Input/Output）操作"}]},{"ID":"20250510110938-0jnz3a9","Type":"NodeParagraph","Properties":{"id":"20250510110938-0jnz3a9","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"在计算机科学和编程中，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"I/O 操作指的是输入（Input）和输出（Output）操作"},{"Type":"NodeText","Data":"。这些操作涉及与外部系统或设备进行数据交换，例如文件系统、网络连接、数据库、用户界面等。对于前端来说，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"I/O 并不是由JavaScript本身直接处理的，而是由 浏览器（在浏览器环境中）或 Node.js（在服务器环境中）的底层实现的"},{"Type":"NodeText","Data":"。JavaScript 只是在调用这些平台提供的 API，实际的 I/O操作 是由平台的多线程机制处理的。"}]},{"ID":"20250510110938-ha3dpsc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-ha3dpsc","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"种类"}]},{"ID":"20250510110938-yf45cl6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20250510110938-yf45cl6","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"1. 网络请求（如 fetch、XMLHttpRequest、Node.js中的 http 模块）"}]},{"ID":"20250510110938-mhuldp6","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-mhuldp6","updated":"20250510110938"},"Children":[{"ID":"20250510110938-gywdugz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-gywdugz","updated":"20250510110938"},"Children":[{"ID":"20250510110938-ojkmorf","Type":"NodeParagraph","Properties":{"id":"20250510110938-ojkmorf","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"：通过 HTTP 或 HTTPS 协议从服务器获取数据或发送数据。"}]}]},{"ID":"20250510110938-2vllq44","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-2vllq44","updated":"20250510110938"},"Children":[{"ID":"20250510110938-kixb02i","Type":"NodeParagraph","Properties":{"id":"20250510110938-kixb02i","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-br8ja39","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-br8ja39","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"fetch('https://api.example.com/data')\n  .then(response =\u003e response.json())\n  .then(data =\u003e console.log(data));\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-9rhspe7","Type":"NodeParagraph","Properties":{"id":"20250510110938-9rhspe7","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"fetch"},{"Type":"NodeText","Data":"​ API 发起一个异步的网络请求，并在请求完成后执行回调函数处理返回的数据。"}]}]}]},{"ID":"20250510110938-vb4gkfh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20250510110938-vb4gkfh","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"2. 文件系统访问（如 FileReader、Node.js中的 fs 模块）"}]},{"ID":"20250510110938-o21tw5d","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-o21tw5d","updated":"20250510110938"},"Children":[{"ID":"20250510110938-42ciin9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-42ciin9","updated":"20250510110938"},"Children":[{"ID":"20250510110938-xvtzpdy","Type":"NodeParagraph","Properties":{"id":"20250510110938-xvtzpdy","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"：读取或写入文件系统中的数据。"}]}]},{"ID":"20250510110938-vwuhjg6","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-vwuhjg6","updated":"20250510110938"},"Children":[{"ID":"20250510110938-199dv89","Type":"NodeParagraph","Properties":{"id":"20250510110938-199dv89","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"注意"},{"Type":"NodeText","Data":"：在浏览器环境中，JavaScript 直接访问本地文件系统的能力是受限的，但可以通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt;"},{"Type":"NodeText","Data":"​ 元素让用户选择文件，并使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"FileReader"},{"Type":"NodeText","Data":"​ API 来读取文件内容。"}]}]},{"ID":"20250510110938-ax2sj0p","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-ax2sj0p","updated":"20250510110938"},"Children":[{"ID":"20250510110938-ycvw1or","Type":"NodeParagraph","Properties":{"id":"20250510110938-ycvw1or","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-v1tiyku","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-v1tiyku","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"const input = document.querySelector('input[type=\"file\"]');\ninput.addEventListener('change', (event) =\u003e {\n  const file = event.target.files[0];\n  const reader = new FileReader();\n  reader.onload = (e) =\u003e console.log(e.target.result);\n  reader.readAsText(file);\n});\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20250510110938-5c86xaz","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20250510110938-5c86xaz","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"3. 定时器（如 setTimeout、setInterval）"}]},{"ID":"20250510110938-kphef4n","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-kphef4n","updated":"20250510110938"},"Children":[{"ID":"20250510110938-o4bi0tl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-o4bi0tl","updated":"20250510110938"},"Children":[{"ID":"20250510110938-94sd5sa","Type":"NodeParagraph","Properties":{"id":"20250510110938-94sd5sa","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"：设置定时器来延迟执行某些代码或定期执行某些任务。"}]}]},{"ID":"20250510110938-9ajo6uh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-9ajo6uh","updated":"20250510110938"},"Children":[{"ID":"20250510110938-yfbqzaf","Type":"NodeParagraph","Properties":{"id":"20250510110938-yfbqzaf","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-e1qc9xc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-e1qc9xc","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"setTimeout(() =\u003e {\n  console.log('This will run after 1 second');\n}, 1000);\n\nsetInterval(() =\u003e {\n  console.log('This will run every second');\n}, 1000);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-8d622t4","Type":"NodeParagraph","Properties":{"id":"20250510110938-8d622t4","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"setTimeout"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"setInterval"},{"Type":"NodeText","Data":"​ 是用于安排代码在未来某个时间点执行的异步操作。"}]}]}]},{"ID":"20250510110938-aaiyjvv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-aaiyjvv","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"注意"}]},{"ID":"20250510110938-upzcqg8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20250510110938-upzcqg8","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"DOM操作不属于I/O操作"}]},{"ID":"20250510110938-2fp8asn","Type":"NodeParagraph","Properties":{"id":"20250510110938-2fp8asn","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"尽管 DOM 操作看起来像是与外部环境（如浏览器渲染引擎）进行交互，但它们实际上是在同一个进程中执行的，即浏览器的 JavaScript 引擎和渲染引擎紧密协作来处理这些操作。因此，DOM 操作不涉及跨进程通信或网络请求等典型的 I/O 操作特征。"}]},{"ID":"20250510110938-h1bdg7w","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20250510110938-h1bdg7w","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"WebSockets不属于I/O操作"}]},{"ID":"20250510110938-aioigj8","Type":"NodeParagraph","Properties":{"id":"20250510110938-aioigj8","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"从技术角度讲，WebSocket 通信确实涉及到了网络 I/O，因为它包括了通过网络接口发送和接收数据的过程。然而，在 JavaScript 和前端开发的语境下，“I/O 操作”这个术语更多地被用来描述那些可能阻塞主线程的操作，如文件系统访问或传统的 HTTP 请求。"}]},{"ID":"20250510110938-l48lefu","Type":"NodeParagraph","Properties":{"id":"20250510110938-l48lefu","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"WebSocket 通信在 JavaScript 中通常是通过事件驱动的方式实现的，这意味着它们不会阻塞主线程。当有新消息到达或者连接状态发生变化时，相应的事件处理器会被触发，从而执行相应的回调函数。因此，尽管 WebSocket 本质上是一个网络 I/O 操作，但它更常被视为一种异步通信机制，类似于其他基于事件的非阻塞操作。"}]},{"ID":"20250510110938-4hewi5h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250510110938-4hewi5h","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"事件驱动"}]},{"ID":"20250510110938-9jkoel4","Type":"NodeParagraph","Properties":{"id":"20250510110938-9jkoel4","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"事件驱动编程"},{"Type":"NodeText","Data":"是一种编程范式，其中程序的流程由事件触发。这些事件可以是用户操作（如点击按钮、输入文本）、传感器输出、消息或来自其他程序/线程的通知等。在事件驱动模型中，程序通常包含一个事件循环，等待并响应发生的事件。"}]},{"ID":"20250510110938-67djngi","Type":"NodeParagraph","Properties":{"id":"20250510110938-67djngi","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"在前端开发中，尤其是使用 JavaScript 和浏览器环境时，事件驱动编程是非常常见的，因为用户交互（例如点击、键盘输入）和异步操作（例如网络请求完成、定时器到期）都是通过事件机制来处理的。"}]},{"ID":"20250510110938-8vwmzes","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-8vwmzes","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"核心概念"}]},{"ID":"20250510110938-8qxrbef","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20250510110938-8qxrbef","updated":"20250510110938"},"Children":[{"ID":"20250510110938-gpub1zt","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20250510110938-gpub1zt","updated":"20250510110938"},"Children":[{"ID":"20250510110938-r4dr1uh","Type":"NodeParagraph","Properties":{"id":"20250510110938-r4dr1uh","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"事件（Event）"},{"Type":"NodeText","Data":"  ：表示某种已经发生的事情。它可以是由用户触发（如鼠标点击、按键按下），也可以是由系统或其他软件组件触发（如计时器超时、网络响应到达）。"}]}]},{"ID":"20250510110938-oflz0m4","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20250510110938-oflz0m4","updated":"20250510110938"},"Children":[{"ID":"20250510110938-wcyx6x8","Type":"NodeParagraph","Properties":{"id":"20250510110938-wcyx6x8","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"事件监听器/处理器（Event Listener/Handler）"},{"Type":"NodeText","Data":"  ：一段代码，当特定类型的事件发生时会被执行。开发者可以通过注册事件监听器来定义对特定事件的响应逻辑。"}]}]},{"ID":"20250510110938-82nz7nj","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20250510110938-82nz7nj","updated":"20250510110938"},"Children":[{"ID":"20250510110938-vbnza8a","Type":"NodeParagraph","Properties":{"id":"20250510110938-vbnza8a","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"事件循环（Event Loop）"},{"Type":"NodeText","Data":"  ：负责监控事件队列，并在事件发生时调用相应的事件处理器。这是实现非阻塞 I/O 的关键机制之一。"}]}]},{"ID":"20250510110938-788xfil","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20250510110938-788xfil","updated":"20250510110938"},"Children":[{"ID":"20250510110938-tzd2rk0","Type":"NodeParagraph","Properties":{"id":"20250510110938-tzd2rk0","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"事件传播（Event Propagation）"},{"Type":"NodeText","Data":"  ：描述了事件如何在 DOM 树中传播的过程，包括捕获阶段和冒泡阶段。这意味着事件不仅可以在目标元素上触发，还可以在其父级元素上触发。"}]}]}]},{"ID":"20250510110938-cjexzmz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-cjexzmz","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"应用"}]},{"ID":"20250510110938-ycvb0yo","Type":"NodeParagraph","Properties":{"id":"20250510110938-ycvb0yo","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"JavaScript，尤其是在浏览器环境中，广泛采用了事件驱动编程模型。以下是一些具体的例子来说明如何在 JavaScript 中应用事件驱动编程。"}]},{"ID":"20250510110938-lnpk7on","Type":"NodeParagraph","Properties":{"id":"20250510110938-lnpk7on","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例 1：响应用户点击事件"}]},{"ID":"20250510110938-5j4z68v","Type":"NodeParagraph","Properties":{"id":"20250510110938-5j4z68v","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-0ffy0ot","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-0ffy0ot","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"document.getElementById('myButton').addEventListener('click', function(event) {\n    console.log('Button clicked!');\n});\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-kwu9id8","Type":"NodeParagraph","Properties":{"id":"20250510110938-kwu9id8","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"这段代码为具有 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"id=\u0026quot;myButton\u0026quot;"},{"Type":"NodeText","Data":"​ 的 HTML 元素添加了一个点击事件监听器。当用户点击该按钮时，会触发事件处理器，控制台将输出 \"Button clicked!\"。"}]},{"ID":"20250510110938-1js9p05","Type":"NodeParagraph","Properties":{"id":"20250510110938-1js9p05","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例 2：处理窗口大小变化"}]},{"ID":"20250510110938-ot04iww","Type":"NodeParagraph","Properties":{"id":"20250510110938-ot04iww","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-rji5tqe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-rji5tqe","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"window.addEventListener('resize', function(event) {\n    console.log(`Window resized to: ${window.innerWidth}x${window.innerHeight}`);\n});\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-9e9h00u","Type":"NodeParagraph","Properties":{"id":"20250510110938-9e9h00u","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"每当窗口大小发生变化时，都会触发 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"resize"},{"Type":"NodeText","Data":"​ 事件，对应的事件处理器会在控制台上打印新的窗口尺寸。"}]},{"ID":"20250510110938-6v6blwe","Type":"NodeParagraph","Properties":{"id":"20250510110938-6v6blwe","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例 3：WebSocket 通信中的事件处理"}]},{"ID":"20250510110938-eaprgr2","Type":"NodeParagraph","Properties":{"id":"20250510110938-eaprgr2","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-o9lhv0n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-o9lhv0n","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"const socket = new WebSocket('ws://example.com/socket');\n\nsocket.addEventListener('open', function(event) {\n    console.log('WebSocket connection opened');\n});\n\nsocket.addEventListener('message', function(event) {\n    console.log('Message from server:', event.data);\n});\n\nsocket.addEventListener('close', function(event) {\n    console.log('WebSocket connection closed');\n});\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-4iomx43","Type":"NodeParagraph","Properties":{"id":"20250510110938-4iomx43","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"这里展示了如何使用 WebSocket API 并为其不同状态的变化（连接打开、接收到消息、连接关闭）设置事件监听器。"}]},{"ID":"20250510110938-kwnvurs","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-kwnvurs","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"优势"}]},{"ID":"20250510110938-xz5cs97","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20250510110938-xz5cs97","updated":"20250510110938"},"Children":[{"ID":"20250510110938-b15c4g4","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20250510110938-b15c4g4","updated":"20250510110938"},"Children":[{"ID":"20250510110938-1xjyepb","Type":"NodeParagraph","Properties":{"id":"20250510110938-1xjyepb","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"非阻塞操作"},{"Type":"NodeText","Data":"：由于事件驱动架构基于回调函数或 Promise 来处理异步任务，因此它允许程序在等待某些操作完成的同时继续执行其他任务，从而提高了效率和响应速度。"}]}]},{"ID":"20250510110938-o5v00wy","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20250510110938-o5v00wy","updated":"20250510110938"},"Children":[{"ID":"20250510110938-hy2whk2","Type":"NodeParagraph","Properties":{"id":"20250510110938-hy2whk2","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"简化并发处理"},{"Type":"NodeText","Data":"：对于需要处理大量并发任务的应用来说，事件驱动模型提供了一种自然的方式来管理这些任务，而无需复杂的多线程编程。"}]}]},{"ID":"20250510110938-1f8r6rq","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20250510110938-1f8r6rq","updated":"20250510110938"},"Children":[{"ID":"20250510110938-lnvna3x","Type":"NodeParagraph","Properties":{"id":"20250510110938-lnvna3x","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"易于扩展"},{"Type":"NodeText","Data":"：由于应用程序的行为主要由事件触发，因此很容易根据需要添加新的功能或修改现有功能，只需增加或更改相应的事件处理器即可。"}]}]}]},{"ID":"20250510110938-p4mt62d","Type":"NodeParagraph","Properties":{"id":"20250510110938-p4mt62d","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"总之，事件驱动编程提供了一种强大的方式来构建响应式和动态的应用程序。通过事件驱动模型，JavaScript 能够有效地处理用户交互、异步网络请求和其他各种异步事件，同时保持界面的流畅性和响应性。"}]},{"ID":"20250510110938-h28hn1t","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250510110938-h28hn1t","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"JS的运行机制"}]},{"ID":"20250510110938-rffzngf","Type":"NodeParagraph","Properties":{"id":"20250510110938-rffzngf","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"JavaScript 的运行机制涵盖了从代码执行到内存管理的各个方面，它的主要核心机制包括调用栈、内存堆、执行上下文、事件循环、消息队列、作用域与闭包、原型继承、异步编程模型、垃圾回收、模块系统、严格模式、代理与反射等概念。"}]},{"ID":"20250510110938-vr4u2ue","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-vr4u2ue","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"调用栈（Call Stack）"}]},{"ID":"20250510110938-7pqmh0u","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-7pqmh0u","updated":"20250510110938"},"Children":[{"ID":"20250510110938-8ylqwfc","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-8ylqwfc","updated":"20250510110938"},"Children":[{"ID":"20250510110938-qr8obdf","Type":"NodeParagraph","Properties":{"id":"20250510110938-qr8obdf","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"调用栈是一个后进先出的数据结构"},{"Type":"NodeText","Data":"，用于跟踪当前正在执行的函数以及它们的调用顺序。"}]}]},{"ID":"20250510110938-nt9ea0u","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-nt9ea0u","updated":"20250510110938"},"Children":[{"ID":"20250510110938-5784phr","Type":"NodeParagraph","Properties":{"id":"20250510110938-5784phr","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"工作原理"},{"Type":"NodeText","Data":"：每当一个函数被调用时，它就会被添加到调用栈的顶部，并在函数执行完毕后从栈顶移除。如果出现错误，比如无限递归，会导致“栈溢出”错误。"}]}]},{"ID":"20250510110938-z338b3m","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-z338b3m","updated":"20250510110938"},"Children":[{"ID":"20250510110938-pgnn2sc","Type":"NodeParagraph","Properties":{"id":"20250510110938-pgnn2sc","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-o9jlk74","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-o9jlk74","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"function foo() {\n    console.log('foo');\n}\n\nfunction bar() {\n    foo();\n    console.log('bar');\n}\n\nconsole.log('start');\nbar();\nconsole.log('end');\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-vizgij7","Type":"NodeParagraph","Properties":{"id":"20250510110938-vizgij7","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"输出顺序为："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"start"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"foo"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"bar"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"end"},{"Type":"NodeText","Data":"​。每个函数调用都会被添加到调用栈中，并在执行完毕后移除。"}]}]}]},{"ID":"20250510110938-7iouavi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-7iouavi","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"内存堆（Memory Heap）"}]},{"ID":"20250510110938-gblvqma","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-gblvqma","updated":"20250510110938"},"Children":[{"ID":"20250510110938-etmunx4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-etmunx4","updated":"20250510110938"},"Children":[{"ID":"20250510110938-cmduc6z","Type":"NodeParagraph","Properties":{"id":"20250510110938-cmduc6z","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"：与调用栈不同，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"内存堆是一个非结构化的区域"},{"Type":"NodeText","Data":"，主要用于动态分配内存空间，例如对象的创建和销毁。"}]}]},{"ID":"20250510110938-zarsi3o","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-zarsi3o","updated":"20250510110938"},"Children":[{"ID":"20250510110938-wcr2obs","Type":"NodeParagraph","Properties":{"id":"20250510110938-wcr2obs","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"工作原理"},{"Type":"NodeText","Data":"：当需要为变量或对象分配内存时，会在内存堆中找到一块合适的空闲空间并进行分配。垃圾回收机制会自动释放不再使用的内存。"}]}]},{"ID":"20250510110938-0z439c6","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-0z439c6","updated":"20250510110938"},"Children":[{"ID":"20250510110938-oat3bbp","Type":"NodeParagraph","Properties":{"id":"20250510110938-oat3bbp","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-n17qdot","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-n17qdot","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"let obj = { a: 1 };\nobj = null; // 移除对对象的引用\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-s9j5o9q","Type":"NodeParagraph","Properties":{"id":"20250510110938-s9j5o9q","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"当对象不再被任何变量或属性引用时，JavaScript 引擎的垃圾回收机制会自动回收该对象占用的内存"}]}]}]},{"ID":"20250510110938-rfdh0zh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-rfdh0zh","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"执行上下文（Execution Context）"}]},{"ID":"20250510110938-5j9iypw","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-5j9iypw","updated":"20250510110938"},"Children":[{"ID":"20250510110938-u9a6rvk","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-u9a6rvk","updated":"20250510110938"},"Children":[{"ID":"20250510110938-4crmr9n","Type":"NodeParagraph","Properties":{"id":"20250510110938-4crmr9n","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"执行上下文是 JavaScript 代码执行时的环境"},{"Type":"NodeText","Data":"，包括全局执行上下文、函数执行上下文以及 eval 函数执行上下文。"}]}]},{"ID":"20250510110938-8iuz2ne","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-8iuz2ne","updated":"20250510110938"},"Children":[{"ID":"20250510110938-d618t29","Type":"NodeParagraph","Properties":{"id":"20250510110938-d618t29","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"工作原理"},{"Type":"NodeText","Data":"：每个执行上下文都包含变量对象（Variable Object）、作用域链（Scope Chain）和 this 值。全局执行上下文是最外层的执行上下文，而每次调用函数都会创建一个新的函数执行上下文。"}]}]},{"ID":"20250510110938-qrfqo7d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-qrfqo7d","updated":"20250510110938"},"Children":[{"ID":"20250510110938-knsk70d","Type":"NodeParagraph","Properties":{"id":"20250510110938-knsk70d","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-78abmyk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-78abmyk","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"function example() {\n    var x = 10;\n    console.log(x); // 变量 x 在函数执行上下文中\n}\nexample(); // 输出: 10\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20250510110938-k8njfs9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-k8njfs9","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"事件循环（Event Loop）与任务队列（Task Queue）"}]},{"ID":"20250510110938-mrlr1ac","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-mrlr1ac","updated":"20250510110938"},"Children":[{"ID":"20250510110938-vkbw5kl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-vkbw5kl","updated":"20250510110938"},"Children":[{"ID":"20250510110938-yl03mz8","Type":"NodeParagraph","Properties":{"id":"20250510110938-yl03mz8","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"："}]},{"ID":"20250510110938-q40emzm","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-q40emzm","updated":"20250510110938"},"Children":[{"ID":"20250510110938-5t315gj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-5t315gj","updated":"20250510110938"},"Children":[{"ID":"20250510110938-in1nime","Type":"NodeParagraph","Properties":{"id":"20250510110938-in1nime","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"事件循环"},{"Type":"NodeText","Data":"：事件循环"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"负责监控和调度调用栈和任务队列"},{"Type":"NodeText","Data":"。它的主要工作是查找调用栈是否为空，以及任务队列中是否有待处理的任务。如果调用栈为空且任务队列中有任务等待，则事件循环会将任务从队列中取出并推入调用栈执行。 它是JavaScript 实现非阻塞 I/O 操作的核心机制，确保异步回调能够适时地被执行。"}]}]},{"ID":"20250510110938-pp4ohfh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-pp4ohfh","updated":"20250510110938"},"Children":[{"ID":"20250510110938-20hhkak","Type":"NodeParagraph","Properties":{"id":"20250510110938-20hhkak","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"任务队列"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"存储了待处理的任务"},{"Type":"NodeText","Data":"，任务队列包括宏任务和微任务两种类型。宏任务包括整体代码块、setTimeout、setInterval、I/O, UI渲染等产生的任务等；微任务包括"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Promise"},{"Type":"NodeText","Data":"​的回调、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MutationObserver"},{"Type":"NodeText","Data":"​回调以及"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"async/await"},{"Type":"NodeText","Data":"​相关的任务等。"}]}]}]}]},{"ID":"20250510110938-dbu27m8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-dbu27m8","updated":"20250510110938"},"Children":[{"ID":"20250510110938-4izsaj6","Type":"NodeParagraph","Properties":{"id":"20250510110938-4izsaj6","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"工作原理"},{"Type":"NodeText","Data":"：当调用栈为空时，事件循环会检查消息队列是否有待处理的任务。如果有，事件循环将从任务队列中取出一条任务，并将其对应的回调函数放入调用栈执行。微任务（Microtasks，如 Promise 回调）优先于宏任务（Macrotasks，如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"setTimeout"},{"Type":"NodeText","Data":"​ 回调）执行，每个循环迭代只从宏任务队列中取一个任务来执行。"}]}]},{"ID":"20250510110938-3lhyplf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-3lhyplf","updated":"20250510110938"},"Children":[{"ID":"20250510110938-z69ntsl","Type":"NodeParagraph","Properties":{"id":"20250510110938-z69ntsl","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-mw2hrnq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-mw2hrnq","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"console.log('Start'); // 同步任务\n\nsetTimeout(() =\u003e { // 宏任务\n    console.log('Timeout');\n}, 0);\n\nPromise.resolve().then(() =\u003e { // 微任务\n    console.log('Promise');\n});\n\nconsole.log('End'); // 同步任务\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-4h9hdrx","Type":"NodeParagraph","Properties":{"id":"20250510110938-4h9hdrx","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"输出顺序为："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Start"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"End"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Promise"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Timeout"},{"Type":"NodeText","Data":"​。首先执行所有同步任务，然后处理微任务，最后处理宏任务。"}]}]}]},{"ID":"20250510110938-hnxmxs3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-hnxmxs3","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"作用域（Scope）与闭包（Closure）"}]},{"ID":"20250510110938-dfitwge","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-dfitwge","updated":"20250510110938"},"Children":[{"ID":"20250510110938-nler1mi","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-nler1mi","updated":"20250510110938"},"Children":[{"ID":"20250510110938-su7n5lu","Type":"NodeParagraph","Properties":{"id":"20250510110938-su7n5lu","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"作用域"},{"Type":"NodeText","Data":"：定义了变量的可访问性。JavaScript 中主要有全局作用域、函数作用域和块作用域（ES6 引入的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"let"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"const"},{"Type":"NodeText","Data":"​ 关键字支持）。"}]}]},{"ID":"20250510110938-cgwdk1h","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-cgwdk1h","updated":"20250510110938"},"Children":[{"ID":"20250510110938-mpnurk0","Type":"NodeParagraph","Properties":{"id":"20250510110938-mpnurk0","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"闭包"},{"Type":"NodeText","Data":"：内部函数可以访问其外部函数的作用域中的变量，即使外部函数已经执行完毕。这使得闭包成为一种强大的工具，用于封装逻辑和数据。"}]}]},{"ID":"20250510110938-526fjp4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-526fjp4","updated":"20250510110938"},"Children":[{"ID":"20250510110938-rbxu3ba","Type":"NodeParagraph","Properties":{"id":"20250510110938-rbxu3ba","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-opmgyke","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-opmgyke","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"function createCounter() {\n    let count = 0; // 局部变量\n    return function() {\n        count++; // 闭包访问外部函数的局部变量\n        return count;\n    };\n}\n\nconst counter = createCounter();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-4tmmlia","Type":"NodeParagraph","Properties":{"id":"20250510110938-4tmmlia","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"createCounter"},{"Type":"NodeText","Data":"​ 返回了一个匿名函数，该函数形成了一个闭包，能够访问并修改外部函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"createCounter"},{"Type":"NodeText","Data":"​ 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"count"},{"Type":"NodeText","Data":"​ 变量。"}]}]}]},{"ID":"20250510110938-404ml2u","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-404ml2u","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"原型继承（Prototype Inheritance）"}]},{"ID":"20250510110938-12plvuo","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-12plvuo","updated":"20250510110938"},"Children":[{"ID":"20250510110938-csp79sf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-csp79sf","updated":"20250510110938"},"Children":[{"ID":"20250510110938-nb656yf","Type":"NodeParagraph","Properties":{"id":"20250510110938-nb656yf","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"：JavaScript 使用原型链来实现对象间的继承。每个对象都有一个指向另一个对象（即其原型）的链接。"}]}]},{"ID":"20250510110938-aab9fvx","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-aab9fvx","updated":"20250510110938"},"Children":[{"ID":"20250510110938-6e5pm7t","Type":"NodeParagraph","Properties":{"id":"20250510110938-6e5pm7t","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"工作原理"},{"Type":"NodeText","Data":"：当试图访问一个对象的属性时，如果该对象本身没有这个属性，则会沿着原型链向上查找，直到找到该属性或到达原型链的末端（null）。"}]}]},{"ID":"20250510110938-c99rgl1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-c99rgl1","updated":"20250510110938"},"Children":[{"ID":"20250510110938-qua3q1y","Type":"NodeParagraph","Properties":{"id":"20250510110938-qua3q1y","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-7u0y6jy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-7u0y6jy","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"function Person(name) {\n    this.name = name;\n}\n\nPerson.prototype.sayHello = function() {\n    console.log(`Hello, my name is ${this.name}`);\n};\n\nconst person1 = new Person('Alice');\nperson1.sayHello(); // 输出: Hello, my name is Alice\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-o5bx3of","Type":"NodeParagraph","Properties":{"id":"20250510110938-o5bx3of","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Person"},{"Type":"NodeText","Data":"​ 构造函数定义了一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":"​ 属性，并在原型上添加了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"sayHello"},{"Type":"NodeText","Data":"​ 方法。当 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"person1"},{"Type":"NodeText","Data":"​ 对象被创建时，它不仅获得了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":"​ 属性，还能通过原型链访问到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"sayHello"},{"Type":"NodeText","Data":"​ 方法。"}]}]}]},{"ID":"20250510110938-m67m9yz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-m67m9yz","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"异步编程模型"}]},{"ID":"20250510110938-j3krwii","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-j3krwii","updated":"20250510110938"},"Children":[{"ID":"20250510110938-t568vat","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-t568vat","updated":"20250510110938"},"Children":[{"ID":"20250510110938-q10dq04","Type":"NodeParagraph","Properties":{"id":"20250510110938-q10dq04","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"回调函数"},{"Type":"NodeText","Data":"：最基础的异步编程方式，但可能导致“回调地狱”问题。"}]}]},{"ID":"20250510110938-ofm0116","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-ofm0116","updated":"20250510110938"},"Children":[{"ID":"20250510110938-h8bvvrh","Type":"NodeParagraph","Properties":{"id":"20250510110938-h8bvvrh","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Promise"},{"Type":"NodeText","Data":"：提供了一种更清晰的方式来处理异步操作的成功或失败情况。"}]}]},{"ID":"20250510110938-95w99an","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-95w99an","updated":"20250510110938"},"Children":[{"ID":"20250510110938-9osie4j","Type":"NodeParagraph","Properties":{"id":"20250510110938-9osie4j","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"async/await"},{"Type":"NodeText","Data":"：基于 Promise 的语法糖，使异步代码看起来像同步代码，提高了代码的可读性和维护性。"}]}]},{"ID":"20250510110938-t33dl95","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-t33dl95","updated":"20250510110938"},"Children":[{"ID":"20250510110938-tlk2jrs","Type":"NodeParagraph","Properties":{"id":"20250510110938-tlk2jrs","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-df2ocv5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-df2ocv5","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"function fetchData() {\n    return new Promise((resolve, reject) =\u003e {\n        setTimeout(() =\u003e {\n            resolve('Data fetched successfully');\n        }, 1000);\n    });\n}\n\nfetchData().then(result =\u003e {\n    console.log(result); // 一秒后输出: Data fetched successfully\n});\nconsole.log('Fetching data...');\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-d3ndsxe","Type":"NodeParagraph","Properties":{"id":"20250510110938-d3ndsxe","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Promise"},{"Type":"NodeText","Data":"​ 来处理异步操作。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"fetchData"},{"Type":"NodeText","Data":"​ 函数返回一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Promise"},{"Type":"NodeText","Data":"​，在一秒钟后解决并打印结果。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Fetching data..."},{"Type":"NodeText","Data":"​ 是同步代码，会立即执行。"}]}]}]},{"ID":"20250510110938-n8042xy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-n8042xy","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"垃圾回收（Garbage Collection, GC）"}]},{"ID":"20250510110938-9ijfn0p","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-9ijfn0p","updated":"20250510110938"},"Children":[{"ID":"20250510110938-qfq4rvr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-qfq4rvr","updated":"20250510110938"},"Children":[{"ID":"20250510110938-krvsdh7","Type":"NodeParagraph","Properties":{"id":"20250510110938-krvsdh7","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"：JavaScript 自动管理内存分配和释放，通过垃圾回收机制自动清理不再使用的对象以释放内存。"}]}]},{"ID":"20250510110938-qj8w0x7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-qj8w0x7","updated":"20250510110938"},"Children":[{"ID":"20250510110938-33v7sjv","Type":"NodeParagraph","Properties":{"id":"20250510110938-33v7sjv","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"常见算法"},{"Type":"NodeText","Data":"：引用计数和标记清除等。"}]}]},{"ID":"20250510110938-knectbp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-knectbp","updated":"20250510110938"},"Children":[{"ID":"20250510110938-i8q3gij","Type":"NodeParagraph","Properties":{"id":"20250510110938-i8q3gij","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-uhwwhdr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-uhwwhdr","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"let obj = { a: 1 };\nobj = null; // 移除对对象的引用\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-bxoibxl","Type":"NodeParagraph","Properties":{"id":"20250510110938-bxoibxl","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"由于没有其他地方引用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"obj"},{"Type":"NodeText","Data":"​ 这个对象，JavaScript 引擎的垃圾回收器会在适当的时候回收该对象占用的内存。"}]}]}]},{"ID":"20250510110938-nkc3yr6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-nkc3yr6","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"模块系统（Module System）"}]},{"ID":"20250510110938-9onb7rm","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-9onb7rm","updated":"20250510110938"},"Children":[{"ID":"20250510110938-mrtmn0s","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-mrtmn0s","updated":"20250510110938"},"Children":[{"ID":"20250510110938-1j83tmr","Type":"NodeParagraph","Properties":{"id":"20250510110938-1j83tmr","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"：ES6 引入了原生的模块支持，允许开发者将代码分割成独立的模块进行管理和复用。"}]}]},{"ID":"20250510110938-56uoiwh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-56uoiwh","updated":"20250510110938"},"Children":[{"ID":"20250510110938-v8wh0k4","Type":"NodeParagraph","Properties":{"id":"20250510110938-v8wh0k4","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"工作原理"},{"Type":"NodeText","Data":"：模块化有助于提高代码的组织性和可维护性，同时也可以减少命名冲突等问题。"}]}]},{"ID":"20250510110938-sge9yw9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-sge9yw9","updated":"20250510110938"},"Children":[{"ID":"20250510110938-bc21y5j","Type":"NodeParagraph","Properties":{"id":"20250510110938-bc21y5j","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-6sy8bct","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-6sy8bct","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// math.js\nexport function add(a, b) {\n    return a + b;\n}\n\n// main.js\nimport { add } from './math.js';\n\nconsole.log(add(2, 3)); // 输出: 5\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-p545f7o","Type":"NodeParagraph","Properties":{"id":"20250510110938-p545f7o","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"使用 ES6 模块系统，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"math.js"},{"Type":"NodeText","Data":"​ 导出了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"add"},{"Type":"NodeText","Data":"​ 函数，而 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"main.js"},{"Type":"NodeText","Data":"​ 导入并使用了该函数。"}]}]}]},{"ID":"20250510110938-k8zro3e","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-k8zro3e","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"严格模式（Strict Mode）"}]},{"ID":"20250510110938-hm0bkj0","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-hm0bkj0","updated":"20250510110938"},"Children":[{"ID":"20250510110938-0zxg71s","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-0zxg71s","updated":"20250510110938"},"Children":[{"ID":"20250510110938-fnlgeyi","Type":"NodeParagraph","Properties":{"id":"20250510110938-fnlgeyi","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"：通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;use strict\u0026quot;;"},{"Type":"NodeText","Data":"​ 声明启用的一种模式，引入了一些限制并禁用了某些不安全的操作。"}]}]},{"ID":"20250510110938-71uqed6","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-71uqed6","updated":"20250510110938"},"Children":[{"ID":"20250510110938-3s31w3q","Type":"NodeParagraph","Properties":{"id":"20250510110938-3s31w3q","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"目的"},{"Type":"NodeText","Data":"：让代码更加健壮和安全。"}]}]},{"ID":"20250510110938-p9l4o47","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-p9l4o47","updated":"20250510110938"},"Children":[{"ID":"20250510110938-yfqxb73","Type":"NodeParagraph","Properties":{"id":"20250510110938-yfqxb73","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-ru3t0zd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-ru3t0zd","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"\"use strict\";\nx = 3.14; // 这会导致错误，因为在严格模式下未声明的变量赋值是不允许的\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20250510110938-cjbgt1a","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-cjbgt1a","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"代理（Proxies）与反射（Reflection）"}]},{"ID":"20250510110938-07gbobu","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-07gbobu","updated":"20250510110938"},"Children":[{"ID":"20250510110938-vs7kys8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-vs7kys8","updated":"20250510110938"},"Children":[{"ID":"20250510110938-4ccmzwg","Type":"NodeParagraph","Properties":{"id":"20250510110938-4ccmzwg","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"代理"},{"Type":"NodeText","Data":"：允许你创建对象的代理，从而拦截并对基本语言操作（如属性查找、赋值、枚举、函数调用等）进行自定义行为。"}]}]},{"ID":"20250510110938-a78g0oe","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-a78g0oe","updated":"20250510110938"},"Children":[{"ID":"20250510110938-gvyo6mb","Type":"NodeParagraph","Properties":{"id":"20250510110938-gvyo6mb","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"反射"},{"Type":"NodeText","Data":"：提供了一系列 API 来获取类的信息以及操作对象，比如获取类的构造函数、检查类是否具有某个属性等。"}]}]},{"ID":"20250510110938-eq9c74w","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-eq9c74w","updated":"20250510110938"},"Children":[{"ID":"20250510110938-jiakdgu","Type":"NodeParagraph","Properties":{"id":"20250510110938-jiakdgu","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"},{"Type":"NodeText","Data":"："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-sarcppc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-sarcppc","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"let target = {};\nlet handler = {\n    get: function(obj, prop) {\n        return prop in obj ? obj[prop] : 37;\n    }\n};\n\nlet proxy = new Proxy(target, handler);\nconsole.log(proxy.a); // 输出: 37 (因为 'a' 属性不存在于 target 对象中)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20250510110938-h3uzz82","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250510110938-h3uzz82","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"微任务（Microtasks）和宏任务（Macrotasks）"}]},{"ID":"20250510110938-z0pnlvj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-z0pnlvj","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"微任务（Microtasks）"}]},{"ID":"20250510110938-lx92n91","Type":"NodeParagraph","Properties":{"id":"20250510110938-lx92n91","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"微任务队列通常用于更细粒度的任务处理，如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Promise"},{"Type":"NodeText","Data":"​ 的回调、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MutationObserver"},{"Type":"NodeText","Data":"​ 回调以及 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"async/await"},{"Type":"NodeText","Data":"​ 关键字背后的 Promise 处理逻辑。微任务会在当前操作完成后立即执行，即在当前任务结束之后但在浏览器渲染之前执行所有微任务。"}]},{"ID":"20250510110938-gyltoqn","Type":"NodeParagraph","Properties":{"id":"20250510110938-gyltoqn","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"}]},{"ID":"20250510110938-xszovft","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-xszovft","updated":"20250510110938"},"Children":[{"ID":"20250510110938-0qwogb1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-0qwogb1","updated":"20250510110938"},"Children":[{"ID":"20250510110938-70nvdta","Type":"NodeParagraph","Properties":{"id":"20250510110938-70nvdta","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Promise.resolve().then(() =\u0026gt; console.log('This is a microtask'));"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20250510110938-6xkipz2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-6xkipz2","updated":"20250510110938"},"Children":[{"ID":"20250510110938-wmgzfqb","Type":"NodeParagraph","Properties":{"id":"20250510110938-wmgzfqb","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"async/await"},{"Type":"NodeText","Data":"​ 编写的异步函数本质上也是通过微任务队列来实现其非阻塞行为的。"}]}]}]},{"ID":"20250510110938-59dk9xp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-59dk9xp","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"宏任务（Macrotasks）"}]},{"ID":"20250510110938-mxo2hty","Type":"NodeParagraph","Properties":{"id":"20250510110938-mxo2hty","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"宏任务包括了整体代码块、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"setTimeout"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"setInterval"},{"Type":"NodeText","Data":"​、I/O、UI渲染等。每次事件循环迭代都会从宏任务队列中取出一个任务执行，这个过程称为一个“tick”。"}]},{"ID":"20250510110938-jpliz2y","Type":"NodeParagraph","Properties":{"id":"20250510110938-jpliz2y","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"示例"}]},{"ID":"20250510110938-9d8838a","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-9d8838a","updated":"20250510110938"},"Children":[{"ID":"20250510110938-5fphj2i","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-5fphj2i","updated":"20250510110938"},"Children":[{"ID":"20250510110938-stjsh7i","Type":"NodeParagraph","Properties":{"id":"20250510110938-stjsh7i","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"setTimeout(() =\u0026gt; console.log('This is a macrotask'), 0);"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20250510110938-afr8cdz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-afr8cdz","updated":"20250510110938"},"Children":[{"ID":"20250510110938-rd21psl","Type":"NodeParagraph","Properties":{"id":"20250510110938-rd21psl","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"setInterval(() =\u0026gt; console.log('Another macrotask'), 1000);"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20250510110938-1lsm5by","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-1lsm5by","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"执行顺序"}]},{"ID":"20250510110938-ju9tx1e","Type":"NodeParagraph","Properties":{"id":"20250510110938-ju9tx1e","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"在一个事件循环的“tick”中，首先会执行一个宏任务，然后执行所有的微任务直到微任务队列为空。之后才会进行页面渲染或其他宏任务的处理。这意味着微任务总是比下一个宏任务先执行完毕，这确保了高优先级的任务可以尽快得到处理。"}]},{"ID":"20250510110938-pe4hrev","Type":"NodeParagraph","Properties":{"id":"20250510110938-pe4hrev","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-hobt16c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-hobt16c","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"console.log('Start'); // 同步任务\n\nsetTimeout(() =\u003e {\n  console.log('Timeout'); // 宏任务\n}, 0);\n\nPromise.resolve().then(() =\u003e {\n  console.log('Promise'); // 微任务\n});\n\nconsole.log('End'); // 同步任务\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-tt6gh0b","Type":"NodeParagraph","Properties":{"id":"20250510110938-tt6gh0b","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"输出顺序将是："}]},{"ID":"20250510110938-y2ysn09","Type":"NodeParagraph","Properties":{"id":"20250510110938-y2ysn09","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-962kts2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-962kts2","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"Start\nEnd\nPromise\nTimeout\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-6tt4tld","Type":"NodeParagraph","Properties":{"id":"20250510110938-6tt4tld","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"这里，“Start” 和 “End” 是同步任务，会最先执行。“Promise” 是微任务，在当前宏任务结束之后立即执行。“Timeout” 是宏任务，将在下一次事件循环迭代中执行。"}]},{"ID":"20250510110938-65766qm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20250510110938-65766qm","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"垃圾回收机制 GC"}]},{"ID":"20250510110938-qunjq4w","Type":"NodeParagraph","Properties":{"id":"20250510110938-qunjq4w","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"JavaScript的垃圾回收机制是"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"自动管理内存"},{"Type":"NodeText","Data":"的一个重要部分，它"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"允许开发者无需手动分配和释放内存"},{"Type":"NodeText","Data":"。这一机制在不同的JavaScript引擎中实现方式有所不同，但主要目标都是为了识别并回收不再使用的对象以释放内存。"}]},{"ID":"20250510110938-yf378gt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-yf378gt","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"工作原理"}]},{"ID":"20250510110938-b17x1gm","Type":"NodeParagraph","Properties":{"id":"20250510110938-b17x1gm","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"垃圾回收（Garbage Collection, GC）主要是通过"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"追踪对象的可达性"},{"Type":"NodeText","Data":"来工作的。如果一个对象无法从任何根对象（比如全局对象、当前调用栈中的局部变量等）访问到，则该对象被认为是不可达的，也就意味着它可以被安全地回收。"}]},{"ID":"20250510110938-n5woow6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-n5woow6","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"V8引擎中"}]},{"ID":"20250510110938-w3ndvyi","Type":"NodeParagraph","Properties":{"id":"20250510110938-w3ndvyi","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"V8是Google开发的开源高性能JavaScript和WebAssembly引擎，用于Chrome和Node.js等。V8使用了多种垃圾回收策略："}]},{"ID":"20250510110938-2idy71s","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-2idy71s","updated":"20250510110938"},"Children":[{"ID":"20250510110938-hkbh9ra","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-hkbh9ra","updated":"20250510110938"},"Children":[{"ID":"20250510110938-iosgv9y","Type":"NodeParagraph","Properties":{"id":"20250510110938-iosgv9y","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"分代垃圾回收"},{"Type":"NodeText","Data":"：V8将对象分为新生代和老生代。新创建的对象首先被放在新生代空间中。由于大部分对象生命周期很短，因此新生代采用了一种名为Scavenge的算法，这是一种快速但空间利用率较低的复制算法。当对象经过几次垃圾回收仍然存活时，它们会被移动到老生代空间。老生代则使用标记-清除和标记-整理算法来处理这些可能长期存在的对象。"}]}]},{"ID":"20250510110938-pm8a34i","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-pm8a34i","updated":"20250510110938"},"Children":[{"ID":"20250510110938-8wreeaf","Type":"NodeParagraph","Properties":{"id":"20250510110938-8wreeaf","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"增量式垃圾回收"},{"Type":"NodeText","Data":"：为了避免长时间的停顿，V8采用了增量式垃圾回收，这意味着垃圾回收工作可以分阶段进行，而不是一次性完成。这有助于提高应用的响应速度。"}]}]},{"ID":"20250510110938-my70amn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-my70amn","updated":"20250510110938"},"Children":[{"ID":"20250510110938-f9v1e7i","Type":"NodeParagraph","Properties":{"id":"20250510110938-f9v1e7i","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"并发垃圾回收"},{"Type":"NodeText","Data":"：现代版本的V8还支持并发垃圾回收，允许某些垃圾回收任务与应用程序代码同时运行，进一步减少GC对性能的影响。"}]}]}]},{"ID":"20250510110938-5ojnq4e","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-5ojnq4e","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"浏览器中"}]},{"ID":"20250510110938-xevjs7r","Type":"NodeParagraph","Properties":{"id":"20250510110938-xevjs7r","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"在浏览器环境中，JavaScript执行与页面渲染共享同一主线程。因此，长时间运行的垃圾回收过程可能会导致页面冻结或卡顿。为此，需要注意："}]},{"ID":"20250510110938-kc0seu0","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-kc0seu0","updated":"20250510110938"},"Children":[{"ID":"20250510110938-n1dnf6a","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-n1dnf6a","updated":"20250510110938"},"Children":[{"ID":"20250510110938-8frrfl2","Type":"NodeParagraph","Properties":{"id":"20250510110938-8frrfl2","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"避免内存泄漏"},{"Type":"NodeText","Data":"：例如，全局变量、闭包不当使用、DOM引用未正确释放等都可能导致内存泄漏。考虑如下示例："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-uvtwwmd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-uvtwwmd","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"var elements = [];\nfunction addElement() {\n    var div = document.createElement('div');\n    div.onclick = function() { console.log(div); }; // 这里形成了闭包，导致div不能被回收\n    elements.push(div);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-fpx7hed","Type":"NodeParagraph","Properties":{"id":"20250510110938-fpx7hed","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"在这个例子中，div元素通过闭包被引用，即使它从DOM中移除也无法被垃圾回收，因为闭包持有对其的引用。"}]}]},{"ID":"20250510110938-fwhjot9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-fwhjot9","updated":"20250510110938"},"Children":[{"ID":"20250510110938-s5syuq2","Type":"NodeParagraph","Properties":{"id":"20250510110938-s5syuq2","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"监听事件的正确清理"},{"Type":"NodeText","Data":"：确保在不需要的时候移除事件监听器，防止因监听器持有所监听对象的引用而导致内存无法释放。"}]}]}]},{"ID":"20250510110938-shutsdq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20250510110938-shutsdq","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"Vue.js中"}]},{"ID":"20250510110938-kgxy9c8","Type":"NodeParagraph","Properties":{"id":"20250510110938-kgxy9c8","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"在JavaScript中，垃圾回收不仅与基础的内存管理相关，还涉及到框架和库的使用。这里以 Vue.js 为例，说明我们该如何去合理的应用垃圾回收机制，避免内存泄露等问题。"}]},{"ID":"20250510110938-8zst5uk","Type":"NodeList","ListData":{},"Properties":{"id":"20250510110938-8zst5uk","updated":"20250510110938"},"Children":[{"ID":"20250510110938-ckemigy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-ckemigy","updated":"20250510110938"},"Children":[{"ID":"20250510110938-jr4d8lh","Type":"NodeParagraph","Properties":{"id":"20250510110938-jr4d8lh","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"组件销毁时解除事件监听器"},{"Type":"NodeText","Data":"：当一个Vue组件被销毁时，确保所有添加的事件监听器也被正确移除。这可以防止由于这些监听器持有了对组件实例或其数据的引用而导致的内存泄漏。"},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-9i24u8p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-9i24u8p","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"export default {\n  mounted() {\n    window.addEventListener('resize', this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    handleResize(event) {\n      // 处理窗口调整大小的逻辑\n    }\n  }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20250510110938-yeuvsge","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-yeuvsge","updated":"20250510110938"},"Children":[{"ID":"20250510110938-kt9pcu8","Type":"NodeParagraph","Properties":{"id":"20250510110938-kt9pcu8","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"清理定时器"},{"Type":"NodeText","Data":"：如果你在组件生命周期内设置了任何定时器（如setInterval、setTimeout），记得在组件销毁前清除它们。"},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-0mcmy4u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-0mcmy4u","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"export default {\n  data() {\n    return {\n      timerId: null\n    };\n  },\n  mounted() {\n    this.timerId = setInterval(() =\u003e {\n      // 定时执行的代码\n    }, 1000);\n  },\n  beforeDestroy() {\n    if (this.timerId !== null) {\n      clearInterval(this.timerId);\n    }\n  }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20250510110938-hcjxwt7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-hcjxwt7","updated":"20250510110938"},"Children":[{"ID":"20250510110938-pf87gl1","Type":"NodeParagraph","Properties":{"id":"20250510110938-pf87gl1","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"避免不必要的全局变量或闭包"},{"Type":"NodeText","Data":"：尽量避免创建指向Vue实例或其他大对象的全局变量或闭包，因为它们可能会阻止这些对象被垃圾回收。"},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-z2pdupi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-z2pdupi","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dHM="},{"Type":"NodeCodeBlockCode","Data":"export default {\n  created() {\n    const self = this; // 尽量避免这样做，除非确实需要\n    setTimeout(function() {\n      console.log(self.message); // 使用箭头函数代替传统函数来保持上下文\n    }, 1000);\n  }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20250510110938-29q2b6f","Type":"NodeParagraph","Properties":{"id":"20250510110938-29q2b6f","updated":"20250510110938"},"Children":[{"Type":"NodeText","Data":"更好的做法是使用箭头函数，它不会创建自己的this，从而避免了额外的引用："},{"Type":"NodeBr","Data":"br"},{"Type":"NodeText","Data":"js"}]},{"ID":"20250510110938-gky64ei","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20250510110938-gky64ei","updated":"20250510110938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"export default {\n  created() {\n    setTimeout(() =\u003e {\n      console.log(this.message);\n    }, 1000);\n  }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20250510110938-177nfzy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20250510110938-177nfzy","updated":"20250510110938"},"Children":[{"ID":"20250510110938-4t063oa","Type":"NodeParagraph","Properties":{"id":"20250510110938-4t063oa","updated":"20250510110938"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"第三方库的使用"},{"Type":"NodeText","Data":"：当你使用第三方库时，请确保按照文档说明正确初始化和销毁资源。例如，如果某个库提供了手动释放资源的方法，则应在Vue组件的beforeDestroy钩子中调用它。"}]}]}]}]}